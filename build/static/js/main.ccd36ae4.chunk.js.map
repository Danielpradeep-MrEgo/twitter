{"version":3,"sources":["SidebarOptions.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOptions","active","Icon","text","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","varient","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","type","Post","forwardRef","userName","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","Widgets","tweetUrl","sourceType","screenName","options","height","class","lang","dir","href","async","charset","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ccd36ae4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SidebarOptions.css\";\r\n\r\nfunction SidebarOptions({ active, Icon, text }) {\r\n  return (\r\n    <div className={`sidebarOptions ${active && \"sidebarOptions--active\"}`}>\r\n      <Icon />\r\n      \r\n      <h2>{text}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarOptions;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport SidebarOptions from \"./SidebarOptions\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      {/* twitter icon */}\r\n      <TwitterIcon className=\"sidebar__twitterIcon\"/>\r\n\r\n      <SidebarOptions active Icon={HomeIcon} text=\"Home\" />\r\n      {/* <>#</> */}\r\n      <SidebarOptions Icon={SearchIcon} text=\"Explore\" />\r\n      <SidebarOptions Icon={NotificationsNoneIcon} text=\"Notification\" />\r\n      <SidebarOptions Icon={MailOutlineIcon} text=\"Messsages\" />\r\n      <SidebarOptions Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\r\n      <SidebarOptions Icon={ListAltIcon} text=\"Lists\" />\r\n      <SidebarOptions Icon={PermIdentityIcon} text=\"Profile\" />\r\n      <SidebarOptions Icon={MoreHorizIcon} text=\"More\" />\r\n\r\n      {/* button tweet */}\r\n      <Button varient=\"outlined\" className=\"sidebar__tweet\" fullWidth>\r\n        Tweet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAxVZzKRglx2XMG2tY_ln2GRgzCfEYyqvY\",\r\n  authDomain: \"twitter-35712.firebaseapp.com\",\r\n  databaseURL: \"https://twitter-35712.firebaseio.com\",\r\n  projectId: \"twitter-35712\",\r\n  storageBucket: \"twitter-35712.appspot.com\",\r\n  messagingSenderId: \"1041044185211\",\r\n  appId: \"1:1041044185211:web:3f8078fc8e3814956382de\",\r\n  measurementId: \"G-PPCLRPRWFN\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nfunction TweetBox() {\r\n\tconst [tweetMessage, setTweetMessage] = useState(\"\");\r\n\tconst [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n\tconst sendTweet = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tdb.collection(\"posts\").add({\r\n\t\t\tdisplayName: \"Daniel pradeep\",\r\n\t\t\tusername: \"danielpradeep16\",\r\n\t\t\tverified: true,\r\n\t\t\ttext: tweetMessage,\r\n\t\t\timage: tweetImage,\r\n\t\t\tavatar:\r\n\t\t\t\t\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\",\r\n\t\t});\r\n\r\n\t\tsetTweetMessage(\"\");\r\n\t\tsetTweetImage(\"\");\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"tweetBox\">\r\n\t\t\t<form>\r\n\t\t\t\t<div className=\"tweetBox__input\">\r\n\t\t\t\t\t<Avatar src=\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\" />\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={(e) => setTweetMessage(e.target.value)}\r\n\t\t\t\t\t\tvalue={tweetMessage}\r\n\t\t\t\t\t\tplaceholder=\"what's happening?\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{/* <input\r\n            onChange={(e) => setTweetImage(e.target.value)}\r\n            value={tweetImage}\r\n            placeholder=\"what's happening?\"\r\n          /> */}\r\n\t\t\t\t</div>\r\n\t\t\t\t<Button onClick={sendTweet} type=\"submit\" className=\"tweetBox__button\">\r\n\t\t\t\t\tTweet\r\n\t\t\t\t</Button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TweetBox;\r\n","import React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\n\r\nconst Post = forwardRef(\r\n  ({ displayName, userName, verified, text, image, avatar }) => {\r\n    // function Post({displayName, userName, verified, text, image, avatar}) {\r\n    //   displayName, userName, verified, text, image, avatar;\r\n    return (\r\n      <div className=\"post\">\r\n        <div className=\"post__avatar\">\r\n          {/* <Avatar src=\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\" /> */}\r\n          <Avatar src={avatar} />\r\n        </div>\r\n        <div className=\"post__body\">\r\n          <div className=\"post__header\">\r\n            <div className=\"post__headerText\">\r\n              <h3>\r\n                {/* danielpradeep {\" \"} */}\r\n                {displayName}{\" \"}\r\n                <span className=\"post__headerSpan\">\r\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />}\r\n                  {/* @danielpradee16 */}@{userName}\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            <div className=\"post__headerDescription\">\r\n              {/* <p>Challenge to build a twitter clone with the React</p> */}\r\n              <p>{text}</p>\r\n            </div>\r\n          </div>\r\n          <img src={image} />\r\n          {/* <img src=\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\" /> */}\r\n          <div className=\"post__footer\">\r\n            <ChatBubbleIcon fontSize=\"small\" />\r\n            <RepeatIcon fontSize=\"small\" />\r\n            <FavoriteBorderIcon fontSize=\"small\" />\r\n            <PublishIcon fontSize=\"small\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Feed.css\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport db from \"./firebase\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction Feed() {\r\n\t// this is a variable\r\n\r\n\tconst [posts, setPosts] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdb.collection(\"posts\").onSnapshot((snapshot) => {\r\n\t\t\tsetPosts(snapshot.docs.map((doc) => doc.data()));\r\n\t\t});\r\n\t}, [posts]);\r\n\r\n\t// console.log(posts, \"posts\");\r\n\r\n\treturn (\r\n\t\t<div className=\"feed\">\r\n\t\t\t{/* header */}\r\n\t\t\t<div className=\"feed__header\">\r\n\t\t\t\t<h2>Home</h2>\r\n\t\t\t</div>\r\n\t\t\t{/* Tweetbox */}\r\n\t\t\t<TweetBox />\r\n\r\n\t\t\t<FlipMove>\r\n\t\t\t\t{posts.map((post) => (\r\n\t\t\t\t\t<Post\r\n\t\t\t\t\t\tkey={post.text}\r\n\t\t\t\t\t\tdisplayName={post.displayName}\r\n\t\t\t\t\t\tuserName={post.userName}\r\n\t\t\t\t\t\tverified={post.verified}\r\n\t\t\t\t\t\ttext={post.text}\r\n\t\t\t\t\t\timage={post.image}\r\n\t\t\t\t\t\tavatar={post.avatar}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</FlipMove>\r\n\r\n\t\t\t{/* <Post\r\n        displayName=\"Danielpradeep\"\r\n        userName=\"Danielpradeep16\"\r\n        verified={true}\r\n        text=\"YOOO its working\"\r\n        image=\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\"\r\n        avatar=\"https://pbs.twimg.com/profile_images/1251432525882290176/7NwAGk-m_400x400.jpg\"\r\n      /> */}\r\n\r\n\t\t\t{/* Post */}\r\n\t\t\t{/* Post */}\r\n\t\t\t{/* Post */}\r\n\t\t\t{/* Post */}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Feed;\r\n","import React from \"react\";\r\nimport \"./Widgets.css\";\r\nimport {\r\n  TwitterTimelineEmbed,\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <SearchIcon className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\"/>\r\n        </div>\r\n\r\n        <div className=\"widgets__widgetContainer\">\r\n            <h2>What's happening?</h2>\r\n            {/* <TwitterTweetEmbed tweetId={\"858551177860055040\"}/> */}\r\n            <TwitterTweetEmbed tweetUrl={\"1304307249225953280\"}/>\r\n            <TwitterTimelineEmbed sourceType=\"profile\" screenName=\"Danielpradeep16\" options={{ height: 400 }}/>\r\n            <blockquote class=\"twitter-tweet\"><p lang=\"und\" dir=\"ltr\"><a href=\"https://t.co/aylkHSrKiT\">pic.twitter.com/aylkHSrKiT</a></p>&mdash; Daniel Pradeep (@DanielPradeep16) <a href=\"https://twitter.com/DanielPradeep16/status/1304307249225953280?ref_src=twsrc%5Etfw\">September 11, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n\r\n            <TwitterShareButton url={\"https://twitter.com/home\"} options={{ text: \"reactjs is awesome\", via:\"@evilJoker\"}}/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n\n      {/* sidebar */}\n      <Sidebar/>\n      {/* feed */}\n      <Feed/>\n      {/* widgets */}\n      <Widgets/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}